{% block javascripts %}
    <script>
document.addEventListener('DOMContentLoaded', function () {
    // Récupérer tous les éléments du panier
    const cartItems = document.querySelectorAll('#sylius-cart-items tbody tr');

    // Créer un tableau de promesses pour les fetch requests
    const fetchPromises = Array.from(cartItems).map(item => {
        // Récupérer l'URL du produit et extraire le slug
        const productLink = item.querySelector('a').getAttribute('href');
        const slug = productLink.split('/').pop(); // Récupère le dernier élément de l'URL comme slug

        // Retourner une promesse fetch
        return fetch(`/product/${slug}/option-dependencies`)
            .then(response => response.json())
            .then(dependencies => ({ item, dependencies }))
            .catch(error => {
                console.error("Erreur lors de la récupération des dépendances d'options :", error);
                return { item, dependencies: [] }; // Retourner un objet vide en cas d'erreur
            });
    });

    // Utiliser Promise.all pour attendre que toutes les fetch requests soient terminées
    Promise.all(fetchPromises).then(results => {
        results.forEach(({ item, dependencies }) => {
            // Appliquer les règles de dépendances pour cet item
            const optionItems = item.querySelectorAll('.sylius-product-options .item');

            optionItems.forEach(optionItem => {
                const optionName = optionItem.getAttribute('data-sylius-option-name');

                // Parcourir les dépendances récupérées
                dependencies.forEach(dependency => {
                    if (dependency.childOption.name === optionName) {
                        // Re-parcourir les options pour vérifier les dépendances parentales
                        optionItems.forEach(parentOptionItem => {
                            const parentOptionName = parentOptionItem.getAttribute('data-sylius-option-name');
                            const parentOptionValue = parentOptionItem.textContent.trim();

                            if (parentOptionName === dependency.parentOption.name && dependency.parentOptionValue.value !== parentOptionValue) {
                                optionItem.style.display = 'none'; // Cacher l'option si elle ne respecte pas la dépendance parentale
                            }
                        });
                    }
                });
            });
        });
    });
});
    </script>
{% endblock %}
